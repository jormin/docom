version: '3.8'
services:
  
  mysql:
    image: library/mysql:8.0.32
    container_name: mysql
    hostname: mysql
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - ./middleware/mysql/conf/my.cnf:/etc/my.cnf
      - ./middleware/mysql/data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

  clickhouse:
    image: clickhouse/clickhouse-server:22.8.4.7
    container_name: clickhouse
    hostname: clickhouse
    ports:
      - "${CLICKHOUSE_PORT_TCP}:9000"
      - "${CLICKHOUSE_PORT_HTTP}:8123"
    volumes:
      - ./middleware/clickhouse/conf/:/etc/clickhouse-server
      - ./middleware/clickhouse/data:/var/lib/clickhouse
    restart: always
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

  redis:
    image: redis:6.0.7
    container_name: redis
    hostname: redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./middleware/redis/conf:/etc/redis
      - ./middleware/redis/data:/data
    command: redis-server /etc/redis/redis.conf
    restart: always
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    hostname: redisinsight
    ports:
      - "${REDIS_INSIGHT_PORT}:8001"
    volumes:
      - ./middleware/redisinsight:/db
    restart: always
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

  mongo:
    image: mongo:5.0.2
    container_name: mongo
    hostname: mongo
    ports:
      - "${MONGO_PORT}:27017"
    environment:
      TZ: Asia/Shanghai
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - ./middleware/mongo/conf:/etc/mongo
      - ./middleware/mongo/data/db:/data/db
      - ./middleware/mongo/data/configdb:/data/configdb
      - ./middleware/mongo/logs:/var/log/mongodb
    command: mongod -f /etc/mongo/mongod.conf
    restart: always
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

  mongo-express:
    image: mongo-express:0.54
    container_name: mongo-express
    hostname: mongo-express
    ports:
      - "${MONGO_EXPRESS_PORT}:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: "mongo"
      ME_CONFIG_MONGODB_PORT: ${MONGO_PORT}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
    restart: always
    depends_on:
      - mongo
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

  rabbitmq:
    image: 'rabbitmq:${RABBITMQ_IMAGE_TAG}'
    container_name: rabbitmq
    hostname: rabbitmq
    environment:
      TZ: 'Asia/Shanghai'
      RABBITMQ_NODENAME: rabbitmq
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - '15671:15672'
      - '5671:5672'
    volumes:
      - ./middleware/rabbitmq:/var/lib/rabbitmq
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

  zookeeper:
    image: zookeeper:3.7.0
    restart: always
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181
    volumes:
      - ./middleware/zookeeper/data:/data
      - ./middleware/zookeeper/datalog:/datalog
      - ./middleware/zookeeper/logs:/logs
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"
      
  kafka:
    image: bitnami/kafka:latest
    restart: always
    container_name: kafka
    hostname: kafka
    ports:
      - 9091:9091
      - 29091:29091
    environment:
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=EXTERNAL://:29091,CLIENT://:9091
      - KAFKA_CFG_ADVERTISED_LISTENERS=EXTERNAL://127.0.0.1:29091,CLIENT://kafka:9091
      - KAFKA_CFG_ZOOKEEPER_CONNECT=${ZOOKEEPER_SERVERS}
    volumes:
      - ./middleware/kafka/data:/bitnami/kafka/data
      - ./middleware/kafka/logs:/bitnami/kafka/logs
      - ./middleware/kafka/config:/opt/bitnami/kafka/config
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

  kafkamanager:
    image: kafkamanager/kafka-manager
    restart: always
    container_name: kafkamanager
    hostname: kafkamanager
    ports:
      - 19001:9000
    environment:
      - ZK_HOSTS=${ZOOKEEPER_SERVERS}
      - KAFKA_MANAGER_AUTH_ENABLED=true
      - KAFKA_MANAGER_USERNAME=${KAFKA_MANAGER_USERNAME}
      - KAFKA_MANAGER_PASSWORD=${KAFKA_MANAGER_PASSWORD}
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

  etcd:
    image: bitnami/etcd:3.4.15
    container_name: etcd
    hostname: etcd
    restart: always
    volumes:
      - ./middleware/etcd/data:/bitnami/etcd/data
      - ./middleware/etcd/conf/etcd.conf.yml:/opt/bitnami/Etcd/conf/etcd.conf.yml
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://0.0.0.0:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "2379:2379/tcp"
    networks:
      - devops
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  devops:
    external: true
